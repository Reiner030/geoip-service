// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: reader.go

package geoip2

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *ASN) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ASN) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"AutonomousSystemNumber":`)
	fflib.FormatBits2(buf, uint64(j.AutonomousSystemNumber), 10, false)
	buf.WriteString(`,"AutonomousSystemOrganization":`)
	fflib.WriteJsonString(buf, string(j.AutonomousSystemOrganization))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *AnonymousIP) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AnonymousIP) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.IsAnonymous {
		buf.WriteString(`{"IsAnonymous":true`)
	} else {
		buf.WriteString(`{"IsAnonymous":false`)
	}
	if j.IsAnonymousVPN {
		buf.WriteString(`,"IsAnonymousVPN":true`)
	} else {
		buf.WriteString(`,"IsAnonymousVPN":false`)
	}
	if j.IsHostingProvider {
		buf.WriteString(`,"IsHostingProvider":true`)
	} else {
		buf.WriteString(`,"IsHostingProvider":false`)
	}
	if j.IsPublicProxy {
		buf.WriteString(`,"IsPublicProxy":true`)
	} else {
		buf.WriteString(`,"IsPublicProxy":false`)
	}
	if j.IsTorExitNode {
		buf.WriteString(`,"IsTorExitNode":true`)
	} else {
		buf.WriteString(`,"IsTorExitNode":false`)
	}
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *City) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *City) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`{"City":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.City.GeoNameID), 10, false)
	if j.City.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.City.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { Code string "maxminddb:\"code\""; GeoNameID uint "maxminddb:\"geoname_id\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"Continent":{ "Code":`)
	fflib.WriteJsonString(buf, string(j.Continent.Code))
	buf.WriteString(`,"GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Continent.GeoNameID), 10, false)
	if j.Continent.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Continent.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"Country":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Country.GeoNameID), 10, false)
	if j.Country.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.Country.IsoCode))
	if j.Country.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Country.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { AccuracyRadius uint16 "maxminddb:\"accuracy_radius\""; Latitude float64 "maxminddb:\"latitude\""; Longitude float64 "maxminddb:\"longitude\""; MetroCode uint "maxminddb:\"metro_code\""; TimeZone string "maxminddb:\"time_zone\"" } kind=struct */
	buf.WriteString(`,"Location":{ "AccuracyRadius":`)
	fflib.FormatBits2(buf, uint64(j.Location.AccuracyRadius), 10, false)
	buf.WriteString(`,"Latitude":`)
	fflib.AppendFloat(buf, float64(j.Location.Latitude), 'g', -1, 64)
	buf.WriteString(`,"Longitude":`)
	fflib.AppendFloat(buf, float64(j.Location.Longitude), 'g', -1, 64)
	buf.WriteString(`,"MetroCode":`)
	fflib.FormatBits2(buf, uint64(j.Location.MetroCode), 10, false)
	buf.WriteString(`,"TimeZone":`)
	fflib.WriteJsonString(buf, string(j.Location.TimeZone))
	buf.WriteByte('}')
	/* Inline struct. type=struct { Code string "maxminddb:\"code\"" } kind=struct */
	buf.WriteString(`,"Postal":{ "Code":`)
	fflib.WriteJsonString(buf, string(j.Postal.Code))
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"RegisteredCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RegisteredCountry.GeoNameID), 10, false)
	if j.RegisteredCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RegisteredCountry.IsoCode))
	if j.RegisteredCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RegisteredCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\""; Type string "maxminddb:\"type\"" } kind=struct */
	buf.WriteString(`,"RepresentedCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RepresentedCountry.GeoNameID), 10, false)
	if j.RepresentedCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.IsoCode))
	if j.RepresentedCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RepresentedCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteString(`,"Type":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.Type))
	buf.WriteByte('}')
	buf.WriteString(`,"Subdivisions":`)
	if j.Subdivisions != nil {
		buf.WriteString(`[`)
		for i, v := range j.Subdivisions {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
			buf.WriteString(`{ "GeoNameID":`)
			fflib.FormatBits2(buf, uint64(v.GeoNameID), 10, false)
			buf.WriteString(`,"IsoCode":`)
			fflib.WriteJsonString(buf, string(v.IsoCode))
			if v.Names == nil {
				buf.WriteString(`,"Names":null`)
			} else {
				buf.WriteString(`,"Names":{ `)
				for key, value := range v.Names {
					fflib.WriteJsonString(buf, key)
					buf.WriteString(`:`)
					fflib.WriteJsonString(buf, string(value))
					buf.WriteByte(',')
				}
				buf.Rewind(1)
				buf.WriteByte('}')
			}
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	/* Inline struct. type=struct { IsAnonymousProxy bool "maxminddb:\"is_anonymous_proxy\""; IsSatelliteProvider bool "maxminddb:\"is_satellite_provider\"" } kind=struct */
	if j.Traits.IsAnonymousProxy {
		buf.WriteString(`,"Traits":{ "IsAnonymousProxy":true`)
	} else {
		buf.WriteString(`,"Traits":{ "IsAnonymousProxy":false`)
	}
	if j.Traits.IsSatelliteProvider {
		buf.WriteString(`,"IsSatelliteProvider":true`)
	} else {
		buf.WriteString(`,"IsSatelliteProvider":false`)
	}
	buf.WriteByte('}')
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *ConnectionType) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ConnectionType) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"ConnectionType":`)
	fflib.WriteJsonString(buf, string(j.ConnectionType))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Country) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Country) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Inline struct. type=struct { Code string "maxminddb:\"code\""; GeoNameID uint "maxminddb:\"geoname_id\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`{"Continent":{ "Code":`)
	fflib.WriteJsonString(buf, string(j.Continent.Code))
	buf.WriteString(`,"GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Continent.GeoNameID), 10, false)
	if j.Continent.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Continent.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"Country":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Country.GeoNameID), 10, false)
	if j.Country.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.Country.IsoCode))
	if j.Country.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Country.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"RegisteredCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RegisteredCountry.GeoNameID), 10, false)
	if j.RegisteredCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RegisteredCountry.IsoCode))
	if j.RegisteredCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RegisteredCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\""; Type string "maxminddb:\"type\"" } kind=struct */
	buf.WriteString(`,"RepresentedCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RepresentedCountry.GeoNameID), 10, false)
	if j.RepresentedCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.IsoCode))
	if j.RepresentedCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RepresentedCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteString(`,"Type":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.Type))
	buf.WriteByte('}')
	/* Inline struct. type=struct { IsAnonymousProxy bool "maxminddb:\"is_anonymous_proxy\""; IsSatelliteProvider bool "maxminddb:\"is_satellite_provider\"" } kind=struct */
	if j.Traits.IsAnonymousProxy {
		buf.WriteString(`,"Traits":{ "IsAnonymousProxy":true`)
	} else {
		buf.WriteString(`,"Traits":{ "IsAnonymousProxy":false`)
	}
	if j.Traits.IsSatelliteProvider {
		buf.WriteString(`,"IsSatelliteProvider":true`)
	} else {
		buf.WriteString(`,"IsSatelliteProvider":false`)
	}
	buf.WriteByte('}')
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Domain) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Domain) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Domain":`)
	fflib.WriteJsonString(buf, string(j.Domain))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Enterprise) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Enterprise) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Inline struct. type=struct { Confidence uint8 "maxminddb:\"confidence\""; GeoNameID uint "maxminddb:\"geoname_id\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`{"City":{ "Confidence":`)
	fflib.FormatBits2(buf, uint64(j.City.Confidence), 10, false)
	buf.WriteString(`,"GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.City.GeoNameID), 10, false)
	if j.City.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.City.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { Code string "maxminddb:\"code\""; GeoNameID uint "maxminddb:\"geoname_id\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
	buf.WriteString(`,"Continent":{ "Code":`)
	fflib.WriteJsonString(buf, string(j.Continent.Code))
	buf.WriteString(`,"GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Continent.GeoNameID), 10, false)
	if j.Continent.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Continent.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\""; Confidence uint8 "maxminddb:\"confidence\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\"" } kind=struct */
	buf.WriteString(`,"Country":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.Country.GeoNameID), 10, false)
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.Country.IsoCode))
	if j.Country.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.Country.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteString(`,"Confidence":`)
	fflib.FormatBits2(buf, uint64(j.Country.Confidence), 10, false)
	if j.Country.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { AccuracyRadius uint16 "maxminddb:\"accuracy_radius\""; Latitude float64 "maxminddb:\"latitude\""; Longitude float64 "maxminddb:\"longitude\""; MetroCode uint "maxminddb:\"metro_code\""; TimeZone string "maxminddb:\"time_zone\"" } kind=struct */
	buf.WriteString(`,"Location":{ "AccuracyRadius":`)
	fflib.FormatBits2(buf, uint64(j.Location.AccuracyRadius), 10, false)
	buf.WriteString(`,"Latitude":`)
	fflib.AppendFloat(buf, float64(j.Location.Latitude), 'g', -1, 64)
	buf.WriteString(`,"Longitude":`)
	fflib.AppendFloat(buf, float64(j.Location.Longitude), 'g', -1, 64)
	buf.WriteString(`,"MetroCode":`)
	fflib.FormatBits2(buf, uint64(j.Location.MetroCode), 10, false)
	buf.WriteString(`,"TimeZone":`)
	fflib.WriteJsonString(buf, string(j.Location.TimeZone))
	buf.WriteByte('}')
	/* Inline struct. type=struct { Code string "maxminddb:\"code\""; Confidence uint8 "maxminddb:\"confidence\"" } kind=struct */
	buf.WriteString(`,"Postal":{ "Code":`)
	fflib.WriteJsonString(buf, string(j.Postal.Code))
	buf.WriteString(`,"Confidence":`)
	fflib.FormatBits2(buf, uint64(j.Postal.Confidence), 10, false)
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\""; Confidence uint8 "maxminddb:\"confidence\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\"" } kind=struct */
	buf.WriteString(`,"RegisteredCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RegisteredCountry.GeoNameID), 10, false)
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RegisteredCountry.IsoCode))
	if j.RegisteredCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RegisteredCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteString(`,"Confidence":`)
	fflib.FormatBits2(buf, uint64(j.RegisteredCountry.Confidence), 10, false)
	if j.RegisteredCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteByte('}')
	/* Inline struct. type=struct { GeoNameID uint "maxminddb:\"geoname_id\""; IsInEuropeanUnion bool "maxminddb:\"is_in_european_union\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\""; Type string "maxminddb:\"type\"" } kind=struct */
	buf.WriteString(`,"RepresentedCountry":{ "GeoNameID":`)
	fflib.FormatBits2(buf, uint64(j.RepresentedCountry.GeoNameID), 10, false)
	if j.RepresentedCountry.IsInEuropeanUnion {
		buf.WriteString(`,"IsInEuropeanUnion":true`)
	} else {
		buf.WriteString(`,"IsInEuropeanUnion":false`)
	}
	buf.WriteString(`,"IsoCode":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.IsoCode))
	if j.RepresentedCountry.Names == nil {
		buf.WriteString(`,"Names":null`)
	} else {
		buf.WriteString(`,"Names":{ `)
		for key, value := range j.RepresentedCountry.Names {
			fflib.WriteJsonString(buf, key)
			buf.WriteString(`:`)
			fflib.WriteJsonString(buf, string(value))
			buf.WriteByte(',')
		}
		buf.Rewind(1)
		buf.WriteByte('}')
	}
	buf.WriteString(`,"Type":`)
	fflib.WriteJsonString(buf, string(j.RepresentedCountry.Type))
	buf.WriteByte('}')
	buf.WriteString(`,"Subdivisions":`)
	if j.Subdivisions != nil {
		buf.WriteString(`[`)
		for i, v := range j.Subdivisions {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { Confidence uint8 "maxminddb:\"confidence\""; GeoNameID uint "maxminddb:\"geoname_id\""; IsoCode string "maxminddb:\"iso_code\""; Names map[string]string "maxminddb:\"names\"" } kind=struct */
			buf.WriteString(`{ "Confidence":`)
			fflib.FormatBits2(buf, uint64(v.Confidence), 10, false)
			buf.WriteString(`,"GeoNameID":`)
			fflib.FormatBits2(buf, uint64(v.GeoNameID), 10, false)
			buf.WriteString(`,"IsoCode":`)
			fflib.WriteJsonString(buf, string(v.IsoCode))
			if v.Names == nil {
				buf.WriteString(`,"Names":null`)
			} else {
				buf.WriteString(`,"Names":{ `)
				for key, value := range v.Names {
					fflib.WriteJsonString(buf, key)
					buf.WriteString(`:`)
					fflib.WriteJsonString(buf, string(value))
					buf.WriteByte(',')
				}
				buf.Rewind(1)
				buf.WriteByte('}')
			}
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	/* Inline struct. type=struct { AutonomousSystemNumber uint "maxminddb:\"autonomous_system_number\""; AutonomousSystemOrganization string "maxminddb:\"autonomous_system_organization\""; ConnectionType string "maxminddb:\"connection_type\""; Domain string "maxminddb:\"domain\""; IsAnonymousProxy bool "maxminddb:\"is_anonymous_proxy\""; IsLegitimateProxy bool "maxminddb:\"is_legitimate_proxy\""; IsSatelliteProvider bool "maxminddb:\"is_satellite_provider\""; ISP string "maxminddb:\"isp\""; StaticIPScore float64 "maxminddb:\"static_ip_score\""; Organization string "maxminddb:\"organization\""; UserType string "maxminddb:\"user_type\"" } kind=struct */
	buf.WriteString(`,"Traits":{ "AutonomousSystemNumber":`)
	fflib.FormatBits2(buf, uint64(j.Traits.AutonomousSystemNumber), 10, false)
	buf.WriteString(`,"AutonomousSystemOrganization":`)
	fflib.WriteJsonString(buf, string(j.Traits.AutonomousSystemOrganization))
	buf.WriteString(`,"ConnectionType":`)
	fflib.WriteJsonString(buf, string(j.Traits.ConnectionType))
	buf.WriteString(`,"Domain":`)
	fflib.WriteJsonString(buf, string(j.Traits.Domain))
	if j.Traits.IsAnonymousProxy {
		buf.WriteString(`,"IsAnonymousProxy":true`)
	} else {
		buf.WriteString(`,"IsAnonymousProxy":false`)
	}
	if j.Traits.IsLegitimateProxy {
		buf.WriteString(`,"IsLegitimateProxy":true`)
	} else {
		buf.WriteString(`,"IsLegitimateProxy":false`)
	}
	if j.Traits.IsSatelliteProvider {
		buf.WriteString(`,"IsSatelliteProvider":true`)
	} else {
		buf.WriteString(`,"IsSatelliteProvider":false`)
	}
	buf.WriteString(`,"ISP":`)
	fflib.WriteJsonString(buf, string(j.Traits.ISP))
	buf.WriteString(`,"StaticIPScore":`)
	fflib.AppendFloat(buf, float64(j.Traits.StaticIPScore), 'g', -1, 64)
	buf.WriteString(`,"Organization":`)
	fflib.WriteJsonString(buf, string(j.Traits.Organization))
	buf.WriteString(`,"UserType":`)
	fflib.WriteJsonString(buf, string(j.Traits.UserType))
	buf.WriteByte('}')
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *ISP) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ISP) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"AutonomousSystemNumber":`)
	fflib.FormatBits2(buf, uint64(j.AutonomousSystemNumber), 10, false)
	buf.WriteString(`,"AutonomousSystemOrganization":`)
	fflib.WriteJsonString(buf, string(j.AutonomousSystemOrganization))
	buf.WriteString(`,"ISP":`)
	fflib.WriteJsonString(buf, string(j.ISP))
	buf.WriteString(`,"Organization":`)
	fflib.WriteJsonString(buf, string(j.Organization))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *InvalidMethodError) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *InvalidMethodError) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Method":`)
	fflib.WriteJsonString(buf, string(j.Method))
	buf.WriteString(`,"DatabaseType":`)
	fflib.WriteJsonString(buf, string(j.DatabaseType))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Reader) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Reader) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{}`)
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *UnknownDatabaseTypeError) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *UnknownDatabaseTypeError) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"DatabaseType":`)
	fflib.WriteJsonString(buf, string(j.DatabaseType))
	buf.WriteByte('}')
	return nil
}
